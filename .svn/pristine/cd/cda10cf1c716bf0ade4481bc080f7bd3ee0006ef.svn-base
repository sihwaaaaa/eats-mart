package service;

import static utils.CustomerUtils.nextInt;
import static utils.ExceptionUtils.*;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import vo.Cart;
import vo.Product;


/**
 * 
 * <h1>카트 서비스</h1>
 * <li>list(), add(), remove() 기능을 이용할 수 있습니다.</li>
 * <hr></hr>
 * 
 * @author 박연재, 이창용
 * 
 * 
 */
public class CartServiceImpl implements CartService {
	
	
	// 카트 싱글톤 추가
	private static CartService cartService = new CartServiceImpl();

	private CartServiceImpl() {

	}

	public static CartService getInstance() {
		return cartService;

	}

	// 싱글톤을 활용해 현재 사용자의 보유 장바구니와 상품 리스트를 가져옴
	private CustomerService customerService = CustomerServiceImpl.getInstance();
	private ProductService productService = ProductServiceImpl.getInstance();

	
	private int listIdx;													// 현재 장바구니에 추가되어 있는 현재 상품의 종류의 갯수 인덱스	


	public List<Product> getProductList() {									// 현재 로그인된 고객의 장바구니에 들어가 있는 상품 리스트
		return customerService.getLoginUser().getCart().productList;
	}

//	public void setProductList(List<Product> products) {									// 현재 로그인된 고객의 장바구니에 들어가 있는 상품 리스트
//		customerService.getLoginUser().getCart().productList = products;
//	}
	/**
	 * 
	 *  <li>현재 장바구니의 리스트 조회</li>
	 * 
	 */
	@Override
	public void list() {
		StringBuilder sb = new StringBuilder();
		System.out.println("================== 장바구니 ====================");
		for (Product p : getProductList()) {
			sb.append(String.format("%4d    %4s    %4d    %4d\n", p.getNo(), p.getName(), p.getPrice(),
					p.getCurrentCnt()));
		}
		System.out.println(sb);
	}


	/**
	 * 
	 * 장바구니에 추가할 상품 번호 입력 받고 갯수까지 입력
	 * 
	 */
	@Override
	public void add(int productNo) {
		int productIdx = productNo - 1; 									// 상품 진열 인덱스
		int remain = productService.getProducts().get(productIdx).getCnt() 	// 현재 남아 있는 재고 갯수
				- productService.getProducts().get(productIdx).getCurrentCnt();

		
		
		if (remain == 0) { 													// 남아 있는 재고 갯수가 0이 될 경우 더 이상 채울 수 없다는 문구를 날린다. 
			System.err.println("이 이상은 더 채울 수 없습니다.");
			return;
		}
		int cnt = checkRange(nextInt("갯수를 입력하세요."), 0, remain); 	// 장바구니에 담을 상품 재고 갯수 입력 ( 예외처리 포함 )

		if (getProductList().isEmpty()) { 									// 장바구니의 상품 리스트가 비어있으면 추가한다.
			getProductList().add(productService.getProducts().get(productIdx)); // 상품 번호를 입력 받고 나서의 상품 리스트 내에 해당 번호의 상품을 고객의 장바구니에 추가한다.
			getProductList().get(getProductList().size() - 1).setCurrentCnt(cnt);					// 상품 재고 갯수를 현재 고객의 장바구니 내에 있는 상품의 현재 갯수에 저장한다.  
			System.out.println("상품을 성공적으로 추가하였습니다.");			// 상품을 성공적으로 추가하였다는 문구를 띄워준다.
			listIdx++;															// 장바구니의 리스트 인덱스를 1씩 증가시킨다.
			sort();																//  장바구니 내의 상품들을 번호를 기준으로 오름차순 정렬시킨다.
			return;
		}

		for (int i = 0; i < getProductList().size(); i++) {
			if (getProductList().get(i).getNo() == productService.getProducts().get(productIdx).getNo()) {
				getProductList().get(i).setCurrentCnt(getProductList().get(i).getCurrentCnt() + cnt);
				System.out.println("상품을 성공적으로 추가하였습니다.");
				productService.sort();
				return;
			}
		}

		getProductList().add(productService.getProducts().get(productIdx)); // 장바구니에 추가
		getProductList().get(getProductList().size() - 1).setCurrentCnt(cnt); 			// 선택한 상품의 갯수 입력 받음
		System.out.println("상품을 성공적으로 추가하였습니다."); // 추가하였다는 문구를 띄워줌
		listIdx++; 												// 리스트 인덱스는 1씩 올라간다.
		sort(); 												// 오름차순 정렬
	}

	
	/**
	 * 
	 * <li>제거할 상품을 상품번호로 입력받아 상품 탐색</li>
	 * @param  no
	 * @return Product
	 */
	@Override
	public Product findByProductNo(int no) {
		Product product = null;
		for (int i = 0; i < getProductList().size(); i++) {
			if (getProductList().get(i).getNo() == no) {
				product = getProductList().get(i);
				break;
			}
		}
		return product;
	}

	/**
	 * 
	 * <li>장바구니 내에 있는 상품 제거</li>
	 * 
	 */
	@Override
	public void remove() {
		getProductList().remove(findByProductNo(nextInt("삭제하실 상품을 선택하세요 : ")));
		sort();
	}
	
	
	/**
	 * 
	 * 
	 * <h1>List를 활용하여 고객의 장바구니 내에 있는 상품번호 정렬</h1>
	 *
	 */
	public void sort() {
		getProductList().sort(new Comparator<Product>() {
			@Override
			public int compare(Product o1, Product o2) {
				// TODO Auto-generated method stub
				return o1.getNo() - o2.getNo();
			}

		});

	}

}
