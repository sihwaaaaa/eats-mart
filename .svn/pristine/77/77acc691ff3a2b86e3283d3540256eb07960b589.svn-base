package main;

import static utils.CustomerUtils.*;

import service.CartService;
import service.CartServiceImpl;
import service.CustomerService;
import service.CustomerServiceImpl;
import service.ProductService;
import service.ProductServiceImpl;
import utils.MyRangeException;
import vo.Customer;
import vo.Product;
import static utils.ExceptionUtils.*;

/**
 * 
 * 기능을 실행하는 구간 조장 - 박연재 팀원 - 박연재, 이시화, 이창용, 이재원
 * 
 * @author - 박연재, 이시화, 이창용, 이재원
 * @version - 1.0.0
 *
 */
public class Main {

	private static CustomerService customerService = CustomerServiceImpl.getInstance();
	private static ProductService productService = ProductServiceImpl.getInstance();;

	// TODO - Cart, Order 서비스의 싱글톤 무조건 구현
//	private static CartService cartService = CartServiceImpl.getInstance();
//	private static OrderService orderService = OrderServiceImpl.getInstance();

	static int input;

	/**
	 * 메인 메서드
	 */
	public static void main(String[] args) {
		System.out.println("마켓에 오신 것을 환영합니다!");
		initProducts();
		while (true) {
			try {
				mainMenu();
			} catch (NumberFormatException e) {
				System.err.println("숫자를 입력해야 합니다.");
			} catch (MyRangeException e) {
				System.err.println(e.getMessage());
			}
		}

	}

	/**
	 * 상품 생성
	 * 
	 */
	private static void initProducts() {
		productService.initCategoryWithProducts();
	}

	private static void mainMenu() {
		customerService = CustomerServiceImpl.getInstance();
		while (true) {

			System.out.println("================== 메인 메뉴 =====================");
			switch (checkRange(nextInt("1. 장보기    2. 로그인    3. 회원가입    4. 종료하기"), 1, 4)) {
			case 1:
//				if (customerService.getLoginUser() == null) {
//					System.out.println("로그인이 되어 있지 않습니다.");
//					break;
//				}
//				break;
			case 2:
				if (customerService.login() == null) {
					System.out.println("로그인에 실패하였습니다.");
					break;
				}
				System.out.println("성공적으로 로그인 되었습니다.");
				LoggedMenu();
				break;
			case 3:
				customerService.register();
				break;
			default:
				System.exit(0);
			}
		}

	}

	/**
	 * 
	 * 로그인 되어 있는 메뉴
	 * 
	 */
	private static void LoggedMenu() {
		while (true) {
			System.out.println("================== 메인 메뉴 =====================");
			switch (checkRange(nextInt("1. 장보기    2. 총 매출액    3 회원 리스트    4. 로그아웃"), 1, 4)) {
			case 1:
//				if (customerService.getLoginUser().equals(customerService)) {
//					System.out.println("로그인이 되어 있지 않습니다.");
//					break;
//				}
				shopMenu();
				break;
			case 2:
				break;
			case 3:
				customerService.list();
				break;
			default:
				// TODO - CustomerService에서 Logout이라는 기능을 구현해야한다.
			}
		}
	}

	/**
	 * 
	 * 장보기 메뉴 구성
	 * 
	 */
	private static void shopMenu() {

		// 카트, 주문 서비스 무조건 구현해야함
//		CartService cartService = CartServiceImpl.getInstance();
//		orderService orderService = OrderServiceImpl.getInstance();

		while (true) {
			System.out.println("==================== 서비스 메뉴 =====================");
			switch (checkRange(nextInt("1. 상품 고르기    2. 장바구니	 3. 결제   4. 뒤로가기"), 1, 4)) {
			case 1:
				selectProductMenu(); // 카테고리가 나오고 카테고리의 상품을 고를 수 있는 메뉴가 나온다.
				break;
			case 2:
//				if (productService.getCurrentProductList() == null) {
//					System.out.println("현재 장바구니에는 비어있습니다.");
//					break;
//				}

//				productService.printCurrentProductList();

				// CartService 관련 기능이 포함되어 있어야함 ( 카트 조회 => ProductService에서 고객이 보유하고 있는 상품을 가져와서
				// 현재 카트 조회하면 끝 => 고객의 Cart를 활용해서)
//				cartService.list();
				break;
			case 3:
				// orderService 관련 기능이 포함되어 있어야함 ( 주문 확인서 => 결제)
//				orderService.orderProducts();
				break;
			default:
				LoggedMenu(); // 메인메뉴로 돌아감
				break;
			}

		}

	}

	/**
	 * 상품 카테고리 메뉴
	 */
	private static void selectProductMenu() {

		while (true) {
			System.out.println("==================  카테고리  ================");
			switch (checkRange(nextInt("1. 과일     2. 채소     3. 육류    4. 뒤로가기"), 1, 4)) {

			case 1:
				productService.findBy(input);

				// TODO - CartService에서 정해줘야 한다.
				int select = nextInt("추가하실 상품을 번호로 선택해주세요.");
				productService.add(input, select);
				break;
			case 2:
				productService.findBy(input);
				break;
			case 3:
				productService.findBy(input);
				break;
			default:
				shopMenu();
				break;
			}
		}

	}

}
