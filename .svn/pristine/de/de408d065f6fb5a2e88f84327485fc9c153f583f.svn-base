package service;

// nextint, nextLine import
import static utils.CustomerUtils.nextInt;
import static utils.CustomerUtils.nextLine;

import java.util.ArrayList;

import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.TreeSet;

import javax.imageio.spi.RegisterableService;

import utils.CustomerUtils;
import vo.Customer;
import java.util.Set;

public class CustomerServiceImpl implements CustomerService {

	private static CustomerService customerService = new CustomerServiceImpl();

	private CustomerServiceImpl() {
		// TODO Auto-generated constructor stub
	}

	public static CustomerService getInstance() {
		return customerService;
	}

	private List<Customer> customers = new ArrayList<Customer>();
	private Customer loginUser;// 현재 로그인된 사람

	public Customer getLoginUser() {
		return loginUser;
	}

	/**
	 * @author 이시화 findBy 메서드 구현 int no과 String id 추출위해 02.09 string 타입 equals로 수정
	 */
	private Customer findBy(int no) {
		Customer customer = null;
		for (int i = 0; i < customers.size(); i++) {
			if (customers.get(i).getNo() == no) {
				customer = customers.get(i);
				break;
			}

		}
		return customer;
	}

	private Customer findBy(String id) {
		Customer customer = null;
		for (int i = 0; i < customers.size(); i++) {
			if (customers.get(i).getId().equals(id)) {
				customer = customers.get(i);
				break;
			}

		}
		return customer;
	}

	private Customer findBy(String id, String password) {
		Customer customer = null;
		for (int i = 0; i < customers.size(); i++) {
			if (customers.get(i).getPassword().equals(password)) {
				customer = customers.get(i);
				break;
			}

		}
		return customer;
	}

	/**
	 * @author 이창용 register 메서드 구현
	 */
	/**
	 * @author 이시화 no값 생성 조건, 아이디 중복값 구현
	 */
	@Override
	public void register() {
		System.out.println("================= 회원 가입 =====================");
		String id = nextLine("아이디를 입력해 주세요 :");
		if (findBy(id) != null) {
			System.err.println("중복된 아이디가 존재합니다");
			return;
		}
		String password = nextLine("비밀번호를 입력해 주세요 :"); // CustomerUtils Scanner 호출
		String address = nextLine("주소를 입력해주세요 :");

		int no = 0;
		if (customers.isEmpty()) {
			no = 1;
		} else {
			no = customers.get(customers.size() - 1).getNo() + 1;
		}

		Customer customer = new Customer(no, id, password, address, 100000);
		customers.add(customer);
		System.out.println("회원가입이 성공적으로 완료되었습니다.");

	}


	/**
	 * 
	 * @author 박연재
	 * 
	 * @author 이시화 ui흐름에 맞게 수정
	 */
	@Override
	public void modify() {
		if (loginUser == null) {
			System.err.println("회원 수정을 하려면 로그인을 해주세요");
			return;
		}
		System.out.println("================= 회원 수정 =====================");
		String password1 = nextLine("현재 비밀번호를 입력해 주세요 : "); // 현재 비밀번호를 입력 받음
		if (findBy(loginUser.getId(), password1) == null) {
			System.err.println("비밀번호가 틀렸습니다");
			return;
		}

		String password = nextLine("변경할 비밀번호를 입력해 주세요 : "); // 바꿀 비밀번호를 입력 받음
		String address = nextLine("변경할 주소를 입력해 주세요 : "); // 주소를 입력 받음
		loginUser.setPassword(password);
		loginUser.setAddress(address);
		System.out.println("회원 수정을 완료하였습니다.");
	}

	/**
	 * @author 이시화 delete 메서드 구현
	 */
	@Override
	public void delete() {
		if (loginUser == null) {
			System.err.println("회원 탈퇴를 하려면 로그인을 해주세요");
			return;
		}
		System.out.println("================= 회원 탈퇴 =====================");
		String password1 = nextLine("비밀번호를 입력해 주세요 : "); // 현재 비밀번호를 입력 받음
		if (findBy(loginUser.getId(), password1) == null) {
			System.err.println("비밀번호가 틀렸습니다");
			return;
		}

		System.err.println("정말 탈퇴하시겠습니까?");
		switch (nextInt("1. 예 2. 아니요")) {
		case 1:
			customers.remove(loginUser);
			System.out.println("회원 탈퇴가 완료되었습니다.");
			break;

		}

	}

	@Override
	public void list() { // 회원번호순 정렬 !!!!정리 필요!!!
		sort();
		System.out.println("================= 회원 조회 =====================");
		Collection<Customer> c2 = customers;// 커스터머 리스트를 담는 공간
//		Collections.sort(c2); //정렬하고 싶은데 오류남

		System.out.println();// 칸 띄우기
		System.out.println("   NO     ID      PASSWORD        주소      자산");// 출력구분
		System.out.println("=================================================");// 구분선
		for (Customer c1 : c2) {// 향상for문으로 c1의 리스트 출력
			System.out.println(c1);

		}
	}

	@Override
	public void sort() {
		customers.sort(new Comparator<Customer>() {
			@Override
			public int compare(Customer o1, Customer o2) {
				// TODO Auto-generated method stub
				return o1.getNo() - o2.getNo();
			}

		});
	}

	/**
	 * @author 이시화 로그인 기능 구현 및 로그인 상태값 저장
	 */
	public Customer login() {
		System.out.println("================= 회원 로그인 ====================");
		String id = nextLine("아이디를 입력해 주세요 :");
		if (findBy(id) != null) {
			String password = nextLine("비밀번호를 입력해 주세요 :");
			if (findBy(id, password) != null) {
				loginUser = findBy(id, password);

			}
		}
		return loginUser;
	}

	/**
	 * 테스트 main
	 * 
	 */
	public static void main(String[] args) {
		CustomerServiceImpl customerServiceImpl = (CustomerServiceImpl) CustomerServiceImpl.getInstance();
		customerServiceImpl.register();
		customerServiceImpl.register();
		customerServiceImpl.register();
		customerServiceImpl.login();
		customerServiceImpl.modify();
		customerServiceImpl.delete();
		customerServiceImpl.list();
		
	}
}
